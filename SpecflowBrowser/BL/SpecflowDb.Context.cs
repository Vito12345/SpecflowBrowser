//------------------------------------------------------------------------------
// <auto-generated>
//    Ce code a été généré à partir d'un modèle.
//
//    Des modifications manuelles apportées à ce fichier peuvent conduire à un comportement inattendu de votre application.
//    Les modifications manuelles apportées à ce fichier sont remplacées si le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Common;
    using Bytel.Cora.Socle.Exception;
    using System.Data.Entity.Validation;
    using System.Text;
    using System.Linq;
    
    
    public partial class SpecflowEntities : DbContext
    {
        public SpecflowEntities()
            : base("name=SpecflowEntities")
        {
        }
    
        
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    	public override int SaveChanges()
        {
            int result;
    
    		try {
    			result = base.SaveChanges();
    		}
    		catch (DbEntityValidationException dbEx)
            {
                var sb = new StringBuilder();
                foreach (DbEntityValidationResult error in dbEx.EntityValidationErrors)
                {
                    sb.AppendLine(string.Format("Entity {0} in state {1} has validation errors:",
                                                error.Entry.Entity.GetType().Name, error.Entry.State));
                    foreach (DbValidationError ve in error.ValidationErrors)
                    {
                        sb.AppendLine(string.Format("\tProperty: {0}, Error: {1}",
                                                    ve.PropertyName, ve.ErrorMessage));
                    }
                }
    
                throw new ExceptionTechnique("Erreur lors du SaveChanges() ==> "+sb.ToString());
            }
            catch (DbUpdateException ex)
            {
                throw new ExceptionTechnique("Erreur lors du SaveChanges() ==> " + GetExceptionMessage(ex), ex);
            }
        		
        	return result;
        }
    
        private string GetExceptionMessage(Exception ex)
        {
            string message = "Exception : " + ex.Message + "\n";
            if (ex.InnerException != null)
            {
                message += GetExceptionMessage(ex.InnerException);
            }
            return message;
        }
    
    	public void UndoChanges()
        {
            var changedEntries = ChangeTracker.Entries().Where(x => x.State != EntityState.Unchanged).ToList();
    
            foreach (var entry in changedEntries.Where(x=>x.State == EntityState.Modified))
            {
                entry.CurrentValues.SetValues(entry.OriginalValues);
                entry.State = EntityState.Unchanged;
            }
    
            foreach (var entry in changedEntries.Where(x=>x.State == EntityState.Added))
            {
                entry.State = EntityState.Detached;
            }
    
            foreach (var entry in changedEntries.Where(x=>x.State == EntityState.Deleted))
            {
                entry.State = EntityState.Unchanged;
            }
    
        }
    
        public virtual IDbSet<Etape> Etapes { get; set; }
        public virtual IDbSet<Fonctionnalite> Fonctionnalites { get; set; }
        public virtual IDbSet<Scenario> Scenarios { get; set; }
        public virtual IDbSet<TableColonne> TableColonnes { get; set; }
        public virtual IDbSet<TableRow> TableRows { get; set; }
        public virtual IDbSet<Table> Tables { get; set; }
        public virtual IDbSet<Tag> Tags { get; set; }
        public virtual IDbSet<TestInfo> TestInfoes { get; set; }
        public virtual IDbSet<Projet> Projets { get; set; }
    }
}
